package mil.afrl.discoverylab.sate13.rippleandroid.data.provider;

import mil.afrl.discoverylab.sate13.rippleandroid.data.provider.util.ColumnMetadata;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class RippleContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + RippleProvider.AUTHORITY);

    private RippleContent() {
    }

    /**
     * Created in version 1
     */
    public static final class DbPatient extends RippleContent {

        private static final String LOG_TAG = DbPatient.class.getSimpleName();

        public static final String TABLE_NAME = "dbPatient";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/ripple-dbpatient";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/ripple-dbpatient";

        public static final Uri CONTENT_URI = Uri.parse(RippleContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            PID(BaseColumns._ID, "integer"),
            FIRST_NAME("first_name", "text"),
            LAST_NAME("last_name", "text"),
            SSN("ssn", "integer"),
            BIRTHDAY("birthday", "text"),
            SEX("sex", "integer"),
            NBC_CONTAMINATION("nbc_contamination", "integer"),
            TYPE("type", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.PID.getName(),
                Columns.FIRST_NAME.getName(),
                Columns.LAST_NAME.getName(),
                Columns.SSN.getName(),
                Columns.BIRTHDAY.getName(),
                Columns.SEX.getName(),
                Columns.NBC_CONTAMINATION.getName(),
                Columns.TYPE.getName()
        };

        private DbPatient() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbPatient | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.PID.getName() + " " + Columns.PID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.FIRST_NAME.getName() + " " + Columns.FIRST_NAME.getType() + ", " + Columns.LAST_NAME.getName() + " " + Columns.LAST_NAME.getType() + ", " + Columns.SSN.getName() + " " + Columns.SSN.getType() + ", " + Columns.BIRTHDAY.getName() + " " + Columns.BIRTHDAY.getType() + ", " + Columns.SEX.getName() + " " + Columns.SEX.getType() + ", " + Columns.NBC_CONTAMINATION.getName() + " " + Columns.NBC_CONTAMINATION.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ");");

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbPatient | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbPatient | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbPatient | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.FIRST_NAME.getName()).append(", ").append(Columns.LAST_NAME.getName()).append(", ").append(Columns.SSN.getName()).append(", ").append(Columns.BIRTHDAY.getName()).append(", ").append(Columns.SEX.getName()).append(", ").append(Columns.NBC_CONTAMINATION.getName()).append(", ").append(Columns.TYPE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.FIRST_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SSN.getName()));
            value = values.getAsString(Columns.BIRTHDAY.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SEX.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.NBC_CONTAMINATION.getName()));
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class DbVitals extends RippleContent {

        private static final String LOG_TAG = DbVitals.class.getSimpleName();

        public static final String TABLE_NAME = "dbVitals";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/ripple-dbvitals";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/ripple-dbvitals";

        public static final Uri CONTENT_URI = Uri.parse(RippleContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            VID(BaseColumns._ID, "integer"),
            IP_ADDR("ip_addr", "integer"),
            TIMESTAMP("timestamp", "integer"),
            SENSOR_TYPE("sensor_type", "integer"),
            VALUE_TYPE("value_type", "integer"),
            VALUE("value", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.VID.getName(),
                Columns.IP_ADDR.getName(),
                Columns.TIMESTAMP.getName(),
                Columns.SENSOR_TYPE.getName(),
                Columns.VALUE_TYPE.getName(),
                Columns.VALUE.getName()
        };

        private DbVitals() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbVitals | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.VID.getName() + " " + Columns.VID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.IP_ADDR.getName() + " " + Columns.IP_ADDR.getType() + ", " + Columns.TIMESTAMP.getName() + " " + Columns.TIMESTAMP.getType() + ", " + Columns.SENSOR_TYPE.getName() + " " + Columns.SENSOR_TYPE.getType() + ", " + Columns.VALUE_TYPE.getName() + " " + Columns.VALUE_TYPE.getType() + ", " + Columns.VALUE.getName() + " " + Columns.VALUE.getType() + ");");

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbVitals | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbVitals | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbVitals | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.IP_ADDR.getName()).append(", ").append(Columns.TIMESTAMP.getName()).append(", ").append(Columns.SENSOR_TYPE.getName()).append(", ").append(Columns.VALUE_TYPE.getName()).append(", ").append(Columns.VALUE.getName()).append(" ) VALUES (?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            stmt.bindLong(i++, values.getAsLong(Columns.IP_ADDR.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.TIMESTAMP.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.SENSOR_TYPE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.VALUE_TYPE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.VALUE.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class DbIntervention extends RippleContent {

        private static final String LOG_TAG = DbIntervention.class.getSimpleName();

        public static final String TABLE_NAME = "dbIntervention";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/ripple-dbintervention";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/ripple-dbintervention";

        public static final Uri CONTENT_URI = Uri.parse(RippleContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            IID(BaseColumns._ID, "integer"),
            PID("pid", "integer"),
            TYPE("type", "text"),
            DETAILS("details", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.IID.getName(),
                Columns.PID.getName(),
                Columns.TYPE.getName(),
                Columns.DETAILS.getName()
        };

        private DbIntervention() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbIntervention | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.IID.getName() + " " + Columns.IID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.PID.getName() + " " + Columns.PID.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.DETAILS.getName() + " " + Columns.DETAILS.getType() + ");");

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbIntervention | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbIntervention | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbIntervention | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.PID.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.DETAILS.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.PID.getName()));
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DETAILS.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class DbTrauma extends RippleContent {

        private static final String LOG_TAG = DbTrauma.class.getSimpleName();

        public static final String TABLE_NAME = "dbTrauma";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/ripple-dbtrauma";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/ripple-dbtrauma";

        public static final Uri CONTENT_URI = Uri.parse(RippleContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            TID(BaseColumns._ID, "integer"),
            PID("pid", "integer"),
            LOCATION("location", "text"),
            TYPE("type", "text"),
            STATUS("status", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.TID.getName(),
                Columns.PID.getName(),
                Columns.LOCATION.getName(),
                Columns.TYPE.getName(),
                Columns.STATUS.getName()
        };

        private DbTrauma() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbTrauma | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.TID.getName() + " " + Columns.TID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.PID.getName() + " " + Columns.PID.getType() + ", " + Columns.LOCATION.getName() + " " + Columns.LOCATION.getType() + ", " + Columns.TYPE.getName() + " " + Columns.TYPE.getType() + ", " + Columns.STATUS.getName() + " " + Columns.STATUS.getType() + ");");

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbTrauma | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbTrauma | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (RippleProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbTrauma | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.PID.getName()).append(", ").append(Columns.LOCATION.getName()).append(", ").append(Columns.TYPE.getName()).append(", ").append(Columns.STATUS.getName()).append(" ) VALUES (?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.PID.getName()));
            value = values.getAsString(Columns.LOCATION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.STATUS.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}

